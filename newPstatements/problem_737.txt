We have an array arr of non-negative integers. For every (contiguous) subarray sub = [arr[i], arr[i + 1], ..., arr[j]] (with i <= j), we take the bitwise OR of all the elements in sub, obtaining a result arr[i] | arr[i + 1] | ... | arr[j]. Return the number of possible results. Results that occur more than once are only counted once in the final answer <br><h4>Example 1:</h4> <br><h4>Input:</h4> arr = [0] <br><h4>Output:</h4> 1 <br><h4>Explanation:</h4> There is only one possible result:</h4> 0. <br><h4>Example 2:</h4> <br><h4>Input:</h4> arr = [1,1,2] <br><h4>Output:</h4> 3 <br><h4>Explanation:</h4> The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2]. These yield the results 1, 1, 2, 1, 3, 3. There are 3 unique values, so the answer is 3. <br><h4>Example 3:</h4> <br><h4>Input:</h4> arr = [1,2,4] <br><h4>Output:</h4> 6 <br><h4>Explanation:</h4> The possible results are 1, 2, 3, 4, 6, and 7. <br><h4>Constraints:</h4> 1 <= nums.length <= 5 * 104 0 <= nums[i] <= 109