Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7. A subsequence of a string is obtained by deleting zero or more characters from the string. A sequence is palindromic if it is equal to the sequence reversed. Two sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi. <br><h4>Example 1:</h4> <br><h4>Input:</h4> s = "bccb" <br><h4>Output:</h4> 6 <br><h4>Explanation:</h4> The 6 different non-empty palindromic subsequences are \'b\', \'c\', \'bb\', \'cc\', \'bcb\', \'bccb\'. Note that \'bcb\' is counted only once, even though it occurs twice. <br><h4>Example 2:</h4> <br><h4>Input:</h4> s = "abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba" <br><h4>Output:</h4> 104860361 <br><h4>Explanation:</h4> There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7. <br><h4>Constraints:</h4> 1 <= s.length <= 1000 s[i] is either \'a\', \'b\', \'c\', or \'d\'.