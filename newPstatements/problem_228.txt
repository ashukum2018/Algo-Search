Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. According to the definition of LCA on Wikipedia:</h4> \xe2\x80\x9cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\xe2\x80\x9d <br><h4>Example 1:</h4> <br><h4>Input:</h4> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 <br><h4>Output:</h4> 6 <br><h4>Explanation:</h4> The LCA of nodes 2 and 8 is 6. <br><h4>Example 2:</h4> <br><h4>Input:</h4> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 <br><h4>Output:</h4> 2 <br><h4>Explanation:</h4> The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. <br><h4>Example 3:</h4> <br><h4>Input:</h4> root = [2,1], p = 2, q = 1 <br><h4>Output:</h4> 2 <br><h4>Constraints:</h4> The number of nodes in the tree is in the range [2, 105]. -109 <= Node.val <= 109 All Node.val are unique. p != q p and q will exist in the BST.