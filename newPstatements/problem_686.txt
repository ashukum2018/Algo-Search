You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge. Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges. <br><h4>Example 1:</h4> <br><h4>Input:</h4> graph = [[1,2,3],[0],[0],[0]] <br><h4>Output:</h4> 4 <br><h4>Explanation:</h4> One possible path is [1,0,2,0,3] <br><h4>Example 2:</h4> <br><h4>Input:</h4> graph = [[1],[0,2,4],[1,3,4],[2],[1,2]] <br><h4>Output:</h4> 4 <br><h4>Explanation:</h4> One possible path is [0,1,4,2,3] <br><h4>Constraints:</h4> n == graph.length 1 <= n <= 12 0 <= graph[i].length < n graph[i] does not contain i. If graph[a] contains b, then graph[b] contains a. The input graph is always connected.