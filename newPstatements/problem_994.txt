Given a string s of \'(\' , \')\' and lowercase English characters. Your task is to remove the minimum number of parentheses ( \'(\' or \')\', in any positions ) so that the resulting parentheses string is valid and return any valid string. Formally, a parentheses string is valid if and only if:</h4> It is the empty string, contains only lowercase characters, or It can be written as AB (A concatenated with B), where A and B are valid strings, or It can be written as (A), where A is a valid string. <br><h4>Example 1:</h4> <br><h4>Input:</h4> s = "lee(t(c)o)de)" <br><h4>Output:</h4> "lee(t(c)o)de" <br><h4>Explanation:</h4> "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted. <br><h4>Example 2:</h4> <br><h4>Input:</h4> s = "a)b(c)d" <br><h4>Output:</h4> "ab(c)d" <br><h4>Example 3:</h4> <br><h4>Input:</h4> s = "))((" <br><h4>Output:</h4> "" <br><h4>Explanation:</h4> An empty string is also valid. <br><h4>Constraints:</h4> 1 <= s.length <= 105 s[i] is either\'(\' , \')\', or lowercase English letter.