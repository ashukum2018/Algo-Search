You are given an array of n strings strs, all of the same length. The strings can be arranged such that there is one on each line, making a grid. For example, strs = ["abc", "bce", "cae"] can be arranged as:</h4> abc bce cae You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 (\'a\', \'b\', \'c\') and 2 (\'c\', \'e\', \'e\') are sorted while column 1 (\'b\', \'c\', \'a\') is not, so you would delete column 1. Return the number of columns that you will delete. <br><h4>Example 1:</h4> <br><h4>Input:</h4> strs = ["cba","daf","ghi"] <br><h4>Output:</h4> 1 <br><h4>Explanation:</h4> The grid looks as follows:</h4> cba daf ghi Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column. <br><h4>Example 2:</h4> <br><h4>Input:</h4> strs = ["a","b"] <br><h4>Output:</h4> 0 <br><h4>Explanation:</h4> The grid looks as follows:</h4> a b Column 0 is the only column and is sorted, so you will not delete any columns. <br><h4>Example 3:</h4> <br><h4>Input:</h4> strs = ["zyx","wvu","tsr"] <br><h4>Output:</h4> 3 <br><h4>Explanation:</h4> The grid looks as follows:</h4> zyx wvu tsr All 3 columns are not sorted, so you will delete all 3. <br><h4>Constraints:</h4> n == strs.length 1 <= n <= 100 1 <= strs[i].length <= 1000 strs[i] consists of lowercase English letters.