You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure. <br><h4>Example 1:</h4> <br><h4>Input:</h4> root = [1,3,null,null,2] <br><h4>Output:</h4> [3,1,null,null,2] <br><h4>Explanation:</h4> 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid. <br><h4>Example 2:</h4> <br><h4>Input:</h4> root = [3,1,4,null,null,2] <br><h4>Output:</h4> [2,1,4,null,null,3] <br><h4>Explanation:</h4> 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid. <br><h4>Constraints:</h4> The number of nodes in the tree is in the range [2, 1000]. -231 <= Node.val <= 231 - 1 Follow up:</h4> A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?