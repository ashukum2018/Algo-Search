Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1. A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:</h4> All the visited cells of the path are 0. All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner). The length of a clear path is the number of visited cells of this path. <br><h4>Example 1:</h4> <br><h4>Input:</h4> grid = [[0,1],[1,0]] <br><h4>Output:</h4> 2 <br><h4>Example 2:</h4> <br><h4>Input:</h4> grid = [[0,0,0],[1,1,0],[1,1,0]] <br><h4>Output:</h4> 4 <br><h4>Example 3:</h4> <br><h4>Input:</h4> grid = [[1,0,0],[1,1,0],[1,1,0]] <br><h4>Output:</h4> -1 <br><h4>Constraints:</h4> n == grid.length n == grid[i].length 1 <= n <= 100 grid[i][j] is 0 or 1