Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays. <br><h4>Example 1:</h4> <br><h4>Input:</h4> nums = [7,2,5,10,8], m = 2 <br><h4>Output:</h4> 18 <br><h4>Explanation:</h4> There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18. <br><h4>Example 2:</h4> <br><h4>Input:</h4> nums = [1,2,3,4,5], m = 2 <br><h4>Output:</h4> 9 <br><h4>Example 3:</h4> <br><h4>Input:</h4> nums = [1,4,4], m = 3 <br><h4>Output:</h4> 4 <br><h4>Constraints:</h4> 1 <= nums.length <= 1000 0 <= nums[i] <= 106 1 <= m <= min(50, nums.length)