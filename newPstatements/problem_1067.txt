Given an array of integers arr, you are initially positioned at the first index of the array. In one step you can jump from index i to index:</h4> i + 1 where:</h4> i + 1 < arr.length. i - 1 where:</h4> i - 1 >= 0. j where:</h4> arr[i] == arr[j] and i != j. Return the minimum number of steps to reach the last index of the array. Notice that you can not jump outside of the array at any time. <br><h4>Example 1:</h4> <br><h4>Input:</h4> arr = [100,-23,-23,404,100,23,23,23,3,404] <br><h4>Output:</h4> 3 <br><h4>Explanation:</h4> You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array. <br><h4>Example 2:</h4> <br><h4>Input:</h4> arr = [7] <br><h4>Output:</h4> 0 <br><h4>Explanation:</h4> Start index is the last index. You do not need to jump. <br><h4>Example 3:</h4> <br><h4>Input:</h4> arr = [7,6,9,6,9,6,9,7] <br><h4>Output:</h4> 1 <br><h4>Explanation:</h4> You can jump directly from index 0 to index 7 which is last index of the array. <br><h4>Constraints:</h4> 1 <= arr.length <= 5 * 104 -108 <= arr[i] <= 108