Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order. The graph is given as follows:</h4> graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]). <br><h4>Example 1:</h4> <br><h4>Input:</h4> graph = [[1,2],[3],[3],[]] <br><h4>Output:</h4> [[0,1,3],[0,2,3]] <br><h4>Explanation:</h4> There are two paths:</h4> 0 -> 1 -> 3 and 0 -> 2 -> 3. <br><h4>Example 2:</h4> <br><h4>Input:</h4> graph = [[4,3,1],[3,2,4],[3],[4],[]] <br><h4>Output:</h4> [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]] <br><h4>Constraints:</h4> n == graph.length 2 <= n <= 15 0 <= graph[i][j] < n graph[i][j] != i (i.e., there will be no self-loops). All the elements of graph[i] are unique. The input graph is guaranteed to be a DAG.