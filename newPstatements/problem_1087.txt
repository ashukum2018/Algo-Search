Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:</h4> 1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1]) 2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1]) 3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j]) 4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j]) Notice that there could be some signs on the cells of the grid that point outside the grid. You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest. You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only. Return the minimum cost to make the grid have at least one valid path. <br><h4>Example 1:</h4> <br><h4>Input:</h4> grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]] <br><h4>Output:</h4> 3 <br><h4>Explanation:</h4> You will start at point (0, 0). The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3) The total cost = 3. <br><h4>Example 2:</h4> <br><h4>Input:</h4> grid = [[1,1,3],[3,2,2],[1,1,4]] <br><h4>Output:</h4> 0 <br><h4>Explanation:</h4> You can follow the path from (0, 0) to (2, 2). <br><h4>Example 3:</h4> <br><h4>Input:</h4> grid = [[1,2],[4,3]] <br><h4>Output:</h4> 1 <br><h4>Constraints:</h4> m == grid.length n == grid[i].length 1 <= m, n <= 100 1 <= grid[i][j] <= 4