There are 8 prison cells in a row and each cell is either occupied or vacant. Each day, whether the cell is occupied or vacant changes according to the following rules:</h4> If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. Otherwise, it becomes vacant. Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors. You are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n. Return the state of the prison after n days (i.e., n such changes described above). <br><h4>Example 1:</h4> <br><h4>Input:</h4> cells = [0,1,0,1,1,0,0,1], n = 7 <br><h4>Output:</h4> [0,0,1,1,0,0,0,0] <br><h4>Explanation:</h4> The following table summarizes the state of the prison on each day:</h4> Day 0:</h4> [0, 1, 0, 1, 1, 0, 0, 1] Day 1:</h4> [0, 1, 1, 0, 0, 0, 0, 0] Day 2:</h4> [0, 0, 0, 0, 1, 1, 1, 0] Day 3:</h4> [0, 1, 1, 0, 0, 1, 0, 0] Day 4:</h4> [0, 0, 0, 0, 0, 1, 0, 0] Day 5:</h4> [0, 1, 1, 1, 0, 1, 0, 0] Day 6:</h4> [0, 0, 1, 0, 1, 1, 0, 0] Day 7:</h4> [0, 0, 1, 1, 0, 0, 0, 0] <br><h4>Example 2:</h4> <br><h4>Input:</h4> cells = [1,0,0,1,0,0,1,0], n = 1000000000 <br><h4>Output:</h4> [0,0,1,1,1,1,1,0] <br><h4>Constraints:</h4> cells.length == 8 cells[i] is either 0 or 1. 1 <= n <= 109