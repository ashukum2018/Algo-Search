Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:</h4> [4,5,6,7,0,1,2] if it was rotated 4 times. [0,1,2,4,5,6,7] if it was rotated 7 times. Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. Given the sorted rotated array nums of unique elements, return the minimum element of this array. You must write an algorithm that runs in O(log n) time. <br><h4>Example 1:</h4> <br><h4>Input:</h4> nums = [3,4,5,1,2] <br><h4>Output:</h4> 1 <br><h4>Explanation:</h4> The original array was [1,2,3,4,5] rotated 3 times. <br><h4>Example 2:</h4> <br><h4>Input:</h4> nums = [4,5,6,7,0,1,2] <br><h4>Output:</h4> 0 <br><h4>Explanation:</h4> The original array was [0,1,2,4,5,6,7] and it was rotated 4 times. <br><h4>Example 3:</h4> <br><h4>Input:</h4> nums = [11,13,15,17] <br><h4>Output:</h4> 11 <br><h4>Explanation:</h4> The original array was [11,13,15,17] and it was rotated 4 times. <br><h4>Constraints:</h4> n == nums.length 1 <= n <= 5000 -5000 <= nums[i] <= 5000 All the integers of nums are unique. nums is sorted and rotated between 1 and n times.