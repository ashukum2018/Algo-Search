Given a singly linked list, return a random node\'s value from the linked list. Each node must have the same probability of being chosen. Implement the Solution class:</h4> Solution(ListNode head) Initializes the object with the head of the singly-linked list head. int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen. <br><h4>Example 1:</h4> <br><h4>Input ["Solution", "getRandom", "getRandom", "getRandom", "getRandom", "getRandom"] [[[1, 2, 3]], [], [], [], [], []] <br><h4>Output [null, 1, 3, 2, 2, 3] <br><h4>Explanation Solution solution = new Solution([1, 2, 3]); solution.getRandom(); // return 1 solution.getRandom(); // return 3 solution.getRandom(); // return 2 solution.getRandom(); // return 2 solution.getRandom(); // return 3 // getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning. <br><h4>Constraints:</h4> The number of nodes in the linked list will be in the range [1, 104]. -104 <= Node.val <= 104 At most 104 calls will be made to getRandom. Follow up:</h4> What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?