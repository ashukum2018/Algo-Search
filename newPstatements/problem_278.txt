Given an m x n integers matrix, return the length of the longest increasing path in matrix. From each cell, you can either move in four directions:</h4> left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed). <br><h4>Example 1:</h4> <br><h4>Input:</h4> matrix = [[9,9,4],[6,6,8],[2,1,1]] <br><h4>Output:</h4> 4 <br><h4>Explanation:</h4> The longest increasing path is [1, 2, 6, 9]. <br><h4>Example 2:</h4> <br><h4>Input:</h4> matrix = [[3,4,5],[3,2,6],[2,2,1]] <br><h4>Output:</h4> 4 <br><h4>Explanation:</h4> The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed. <br><h4>Example 3:</h4> <br><h4>Input:</h4> matrix = [[1]] <br><h4>Output:</h4> 1 <br><h4>Constraints:</h4> m == matrix.length n == matrix[i].length 1 <= m, n <= 200 0 <= matrix[i][j] <= 231 - 1