There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2]. Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums. You must write an algorithm with O(log n) runtime complexity. <br><h4>Example 1:</h4> <br><h4>Input:</h4> nums = [4,5,6,7,0,1,2], target = 0 <br><h4>Output:</h4> 4 <br><h4>Example 2:</h4> <br><h4>Input:</h4> nums = [4,5,6,7,0,1,2], target = 3 <br><h4>Output:</h4> -1 <br><h4>Example 3:</h4> <br><h4>Input:</h4> nums = [1], target = 0 <br><h4>Output:</h4> -1 <br><h4>Constraints:</h4> 1 <= nums.length <= 5000 -104 <= nums[i] <= 104 All values of nums are unique. nums is an ascending array that is possibly rotated. -104 <= target <= 104