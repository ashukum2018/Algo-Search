Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing. A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1]. <br><h4>Example 1:</h4> <br><h4>Input:</h4> nums = [1,3,5,4,7] <br><h4>Output:</h4> 3 <br><h4>Explanation:</h4> The longest continuous increasing subsequence is [1,3,5] with length 3. Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element 4. <br><h4>Example 2:</h4> <br><h4>Input:</h4> nums = [2,2,2,2,2] <br><h4>Output:</h4> 1 <br><h4>Explanation:</h4> The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly increasing. <br><h4>Constraints:</h4> 1 <= nums.length <= 104 -109 <= nums[i] <= 109