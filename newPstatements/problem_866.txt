We run a preorder depth-first search (DFS) on the root of a binary tree. At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node. If the depth of a node is D, the depth of its immediate child is D + 1. The depth of the root node is 0. If a node has only one child, that child is guaranteed to be the left child. Given the output traversal of this traversal, recover the tree and return its root. <br><h4>Example 1:</h4> <br><h4>Input:</h4> traversal = "1-2--3--4-5--6--7" <br><h4>Output:</h4> [1,2,5,3,4,6,7] <br><h4>Example 2:</h4> <br><h4>Input:</h4> traversal = "1-2--3---4-5--6---7" <br><h4>Output:</h4> [1,2,5,3,null,6,null,4,null,7] <br><h4>Example 3:</h4> <br><h4>Input:</h4> traversal = "1-401--349---90--88" <br><h4>Output:</h4> [1,401,null,349,88,90] <br><h4>Constraints:</h4> The number of nodes in the original tree is in the range [1, 1000]. 1 <= Node.val <= 109