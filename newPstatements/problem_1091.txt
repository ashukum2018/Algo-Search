Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST). Assume a BST is defined as follows:</h4> The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees. <br><h4>Example 1:</h4> <br><h4>Input:</h4> root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6] <br><h4>Output:</h4> 20 <br><h4>Explanation:</h4> Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3. <br><h4>Example 2:</h4> <br><h4>Input:</h4> root = [4,3,null,1,2] <br><h4>Output:</h4> 2 <br><h4>Explanation:</h4> Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2. <br><h4>Example 3:</h4> <br><h4>Input:</h4> root = [-4,-2,-5] <br><h4>Output:</h4> 0 <br><h4>Explanation:</h4> All values are negatives. Return an empty BST. <br><h4>Constraints:</h4> The number of nodes in the tree is in the range [1, 4 * 104]. -4 * 104 <= Node.val <= 4 * 104