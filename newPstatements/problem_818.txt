You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree. In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent. Return the minimum number of moves required to make every node have exactly one coin. <br><h4>Example 1:</h4> <br><h4>Input:</h4> root = [3,0,0] <br><h4>Output:</h4> 2 <br><h4>Explanation:</h4> From the root of the tree, we move one coin to its left child, and one coin to its right child. <br><h4>Example 2:</h4> <br><h4>Input:</h4> root = [0,3,0] <br><h4>Output:</h4> 3 <br><h4>Explanation:</h4> From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child. <br><h4>Constraints:</h4> The number of nodes in the tree is n. 1 <= n <= 100 0 <= Node.val <= n The sum of all Node.val is n.