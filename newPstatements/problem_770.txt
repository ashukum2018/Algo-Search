Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix. A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1). <br><h4>Example 1:</h4> <br><h4>Input:</h4> matrix = [[2,1,3],[6,5,4],[7,8,9]] <br><h4>Output:</h4> 13 <br><h4>Explanation:</h4> There are two falling paths with a minimum sum as shown. <br><h4>Example 2:</h4> <br><h4>Input:</h4> matrix = [[-19,57],[-40,-5]] <br><h4>Output:</h4> -59 <br><h4>Explanation:</h4> The falling path with a minimum sum is shown. <br><h4>Constraints:</h4> n == matrix.length == matrix[i].length 1 <= n <= 100 -100 <= matrix[i][j] <= 100