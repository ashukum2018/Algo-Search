Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them. Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one. <br><h4>Example 1:</h4> <br><h4>Input:</h4> nums = [1,2,1,2,6,7,5,1], k = 2 <br><h4>Output:</h4> [0,3,5] <br><h4>Explanation:</h4> Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5]. We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger. <br><h4>Example 2:</h4> <br><h4>Input:</h4> nums = [1,2,1,2,1,2,1,2,1], k = 2 <br><h4>Output:</h4> [0,2,4] <br><h4>Constraints:</h4> 1 <= nums.length <= 2 * 104 1 <= nums[i] < 216 1 <= k <= floor(nums.length / 3)