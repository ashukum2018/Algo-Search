Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it. Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree. <br><h4>Example 1:</h4> <br><h4>Input:</h4> root = [1,2,3,4] <br><h4>Output:</h4> "1(2(4))(3)" <br><h4>Explanation:</h4> Originally, it needs to be "1(2(4)())(3()())", but you need to omit all the unnecessary empty parenthesis pairs. And it will be "1(2(4))(3)" <br><h4>Example 2:</h4> <br><h4>Input:</h4> root = [1,2,3,null,4] <br><h4>Output:</h4> "1(2()(4))(3)" <br><h4>Explanation:</h4> Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output. <br><h4>Constraints:</h4> The number of nodes in the tree is in the range [1, 104]. -1000 <= Node.val <= 1000