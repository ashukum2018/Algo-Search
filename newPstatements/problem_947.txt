Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1. The distance used in this problem is the Manhattan distance:</h4> the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|. <br><h4>Example 1:</h4> <br><h4>Input:</h4> grid = [[1,0,1],[0,0,0],[1,0,1]] <br><h4>Output:</h4> 2 <br><h4>Explanation:</h4> The cell (1, 1) is as far as possible from all the land with distance 2. <br><h4>Example 2:</h4> <br><h4>Input:</h4> grid = [[1,0,0],[0,0,0],[0,0,0]] <br><h4>Output:</h4> 4 <br><h4>Explanation:</h4> The cell (2, 2) is as far as possible from all the land with distance 4. <br><h4>Constraints:</h4> n == grid.length n == grid[i].length 1 <= n <= 100 grid[i][j] is 0 or 1