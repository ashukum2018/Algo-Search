You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree. If node i has no left child then leftChild[i] will equal -1, similarly for the right child. Note that the nodes have no values and that we only use the node numbers in this problem. <br><h4>Example 1:</h4> <br><h4>Input:</h4> n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1] <br><h4>Output:</h4> true <br><h4>Example 2:</h4> <br><h4>Input:</h4> n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1] <br><h4>Output:</h4> false <br><h4>Example 3:</h4> <br><h4>Input:</h4> n = 2, leftChild = [1,0], rightChild = [-1,-1] <br><h4>Output:</h4> false <br><h4>Constraints:</h4> n == leftChild.length == rightChild.length 1 <= n <= 104 -1 <= leftChild[i], rightChild[i] <= n - 1