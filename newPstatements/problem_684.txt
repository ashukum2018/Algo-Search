You may recall that an array arr is a mountain array if and only if:</h4> arr.length >= 3 There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:</h4> \t arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray. <br><h4>Example 1:</h4> <br><h4>Input:</h4> arr = [2,1,4,7,3,2,5] <br><h4>Output:</h4> 5 <br><h4>Explanation:</h4> The largest mountain is [1,4,7,3,2] which has length 5. <br><h4>Example 2:</h4> <br><h4>Input:</h4> arr = [2,2,2] <br><h4>Output:</h4> 0 <br><h4>Explanation:</h4> There is no mountain. <br><h4>Constraints:</h4> 1 <= arr.length <= 104 0 <= arr[i] <= 104 Follow up:</h4> Can you solve it using only one pass? Can you solve it in O(1) space?