On an alphabet board, we start at position (0, 0), corresponding to character board[0][0]. Here, board = ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"], as shown in the diagram below. We may make the following moves:</h4> \'U\' moves our position up one row, if the position exists on the board; \'D\' moves our position down one row, if the position exists on the board; \'L\' moves our position left one column, if the position exists on the board; \'R\' moves our position right one column, if the position exists on the board; \'!\' adds the character board[r][c] at our current position (r, c) to the answer. (Here, the only positions that exist on the board are positions with letters on them.) Return a sequence of moves that makes our answer equal to target in the minimum number of moves. You may return any path that does so. <br><h4>Example 1:</h4> <br><h4>Input:</h4> target = "leet" <br><h4>Output:</h4> "DDR!UURRR!!DDD!" <br><h4>Example 2:</h4> <br><h4>Input:</h4> target = "code" <br><h4>Output:</h4> "RR!DDRR!UUL!R!" <br><h4>Constraints:</h4> 1 <= target.length <= 100 target consists only of English lowercase letters.