Given a list of folders folder, return the folders after removing all sub-folders in those folders. You may return the answer in any order. If a folder[i] is located within another folder[j], it is called a sub-folder of it. The format of a path is one or more concatenated strings of the form:</h4> \'/\' followed by one or more lowercase English letters. For example, "/leetcode" and "/leetcode/problems" are valid paths while an empty string and "/" are not. <br><h4>Example 1:</h4> <br><h4>Input:</h4> folder = ["/a","/a/b","/c/d","/c/d/e","/c/f"] <br><h4>Output:</h4> ["/a","/c/d","/c/f"] <br><h4>Explanation:</h4> Folders "/a/b" is a subfolder of "/a" and "/c/d/e" is inside of folder "/c/d" in our filesystem. <br><h4>Example 2:</h4> <br><h4>Input:</h4> folder = ["/a","/a/b/c","/a/b/d"] <br><h4>Output:</h4> ["/a"] <br><h4>Explanation:</h4> Folders "/a/b/c" and "/a/b/d" will be removed because they are subfolders of "/a". <br><h4>Example 3:</h4> <br><h4>Input:</h4> folder = ["/a/b/c","/a/b/ca","/a/b/d"] <br><h4>Output:</h4> ["/a/b/c","/a/b/ca","/a/b/d"] <br><h4>Constraints:</h4> 1 <= folder.length <= 4 * 104 2 <= folder[i].length <= 100 folder[i] contains only lowercase letters and \'/\'. folder[i] always starts with the character \'/\'. Each folder name is unique.