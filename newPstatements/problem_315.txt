Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling. Implement the Solution class:</h4> Solution(int[] nums) Initializes the object with the integer array nums. int[] reset() Resets the array to its original configuration and returns it. int[] shuffle() Returns a random shuffling of the array. <br><h4>Example 1:</h4> <br><h4>Input ["Solution", "shuffle", "reset", "shuffle"] [[[1, 2, 3]], [], [], []] <br><h4>Output [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]] <br><h4>Explanation Solution solution = new Solution([1, 2, 3]); solution.shuffle(); // Shuffle the array [1,2,3] and return its result. // Any permutation of [1,2,3] must be equally likely to be returned. // <br><h4>Example:</h4> return [3, 1, 2] solution.reset(); // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3] solution.shuffle(); // Returns the random shuffling of array [1,2,3]. <br><h4>Example:</h4> return [1, 3, 2] <br><h4>Constraints:</h4> 1 <= nums.length <= 50 -106 <= nums[i] <= 106 All the elements of nums are unique. At most 104 calls in total will be made to reset and shuffle.