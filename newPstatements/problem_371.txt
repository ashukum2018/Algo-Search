Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST. Basically, the deletion can be divided into two stages:</h4> Search for a node to remove. If the node is found, delete the node. <br><h4>Example 1:</h4> <br><h4>Input:</h4> root = [5,3,6,2,4,null,7], key = 3 <br><h4>Output:</h4> [5,4,6,2,null,null,7] <br><h4>Explanation:</h4> Given key to delete is 3. So we find the node with value 3 and delete it. One valid answer is [5,4,6,2,null,null,7], shown in the above BST. Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted. <br><h4>Example 2:</h4> <br><h4>Input:</h4> root = [5,3,6,2,4,null,7], key = 0 <br><h4>Output:</h4> [5,3,6,2,4,null,7] <br><h4>Explanation:</h4> The tree does not contain a node with value = 0. <br><h4>Example 3:</h4> <br><h4>Input:</h4> root = [], key = 0 <br><h4>Output:</h4> [] <br><h4>Constraints:</h4> The number of nodes in the tree is in the range [0, 104]. -105 <= Node.val <= 105 Each node has a unique value. root is a valid binary search tree. -105 <= key <= 105 Follow up:</h4> Could you solve it with time complexity O(height of tree)?