One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node\'s value. If it is a null node, we record using a sentinel value such as \'#\'. For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where \'#\' represents a null node. Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree. It is guaranteed that each comma-separated value in the string must be either an integer or a character \'#\' representing null pointer. You may assume that the input format is always valid. For example, it could never contain two consecutive commas, such as "1,,3". Note:</h4> You are not allowed to reconstruct the tree. <br><h4>Example 1:</h4> <br><h4>Input:</h4> preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#" <br><h4>Output:</h4> true <br><h4>Example 2:</h4> <br><h4>Input:</h4> preorder = "1,#" <br><h4>Output:</h4> false <br><h4>Example 3:</h4> <br><h4>Input:</h4> preorder = "9,#,#,1" <br><h4>Output:</h4> false <br><h4>Constraints:</h4> 1 <= preorder.length <= 104 preorder consist of integers in the range [0, 100] and \'#\' separated by commas \',\'.