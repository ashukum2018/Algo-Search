Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order. <br><h4>Example 1:</h4> <br><h4>Input:</h4> nums = [-4,-1,0,3,10] <br><h4>Output:</h4> [0,1,9,16,100] <br><h4>Explanation:</h4> After squaring, the array becomes [16,1,0,9,100]. After sorting, it becomes [0,1,9,16,100]. <br><h4>Example 2:</h4> <br><h4>Input:</h4> nums = [-7,-3,2,3,11] <br><h4>Output:</h4> [4,9,9,49,121] <br><h4>Constraints:</h4> 1 <= nums.length <= 104 -104 <= nums[i] <= 104 nums is sorted in non-decreasing order. Follow up:</h4> Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?