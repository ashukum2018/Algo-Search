Given an array of integers arr, sort the array by performing a series of pancake flips. In one pancake flip we do the following steps:</h4> Choose an integer k where 1 <= k <= arr.length. Reverse the sub-array arr[0...k-1] (0-indexed). For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3. Return an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct. <br><h4>Example 1:</h4> <br><h4>Input:</h4> arr = [3,2,4,1] <br><h4>Output:</h4> [4,2,4,3] <br><h4>Explanation:</h4> We perform 4 pancake flips, with k values 4, 2, 4, and 3. Starting state:</h4> arr = [3, 2, 4, 1] After 1st flip (k = 4):</h4> arr = [1, 4, 2, 3] After 2nd flip (k = 2):</h4> arr = [4, 1, 2, 3] After 3rd flip (k = 4):</h4> arr = [3, 2, 1, 4] After 4th flip (k = 3):</h4> arr = [1, 2, 3, 4], which is sorted. <br><h4>Example 2:</h4> <br><h4>Input:</h4> arr = [1,2,3] <br><h4>Output:</h4> [] <br><h4>Explanation:</h4> The input is already sorted, so there is no need to flip anything. Note that other answers, such as [3, 3], would also be accepted. <br><h4>Constraints:</h4> 1 <= arr.length <= 100 1 <= arr[i] <= arr.length All integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length).