Let's call an array arr a mountain if the following properties hold:</h4> arr.length >= 3 There exists some i with 0 < i < arr.length - 1 such that:</h4> \t arr[0] < arr[1] < ... arr[i-1] < arr[i] arr[i] > arr[i+1] > ... > arr[arr.length - 1] Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]. <br><h4>Example 1:</h4> <br><h4>Input:</h4> arr = [0,1,0] <br><h4>Output:</h4> 1 <br><h4>Example 2:</h4> <br><h4>Input:</h4> arr = [0,2,1,0] <br><h4>Output:</h4> 1 <br><h4>Example 3:</h4> <br><h4>Input:</h4> arr = [0,10,5,2] <br><h4>Output:</h4> 1 <br><h4>Constraints:</h4> 3 <= arr.length <= 104 0 <= arr[i] <= 106 arr is guaranteed to be a mountain array. Follow up:</h4> Finding the O(n) is straightforward, could you find an O(log(n)) solution?