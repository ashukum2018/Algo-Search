Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree. <br><h4>Example 1:</h4> <br><h4>Input:</h4> root = [3,1,4,null,2], k = 1 <br><h4>Output:</h4> 1 <br><h4>Example 2:</h4> <br><h4>Input:</h4> root = [5,3,6,2,4,null,null,1], k = 3 <br><h4>Output:</h4> 3 <br><h4>Constraints:</h4> The number of nodes in the tree is n. 1 <= k <= n <= 104 0 <= Node.val <= 104 Follow up:</h4> If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?